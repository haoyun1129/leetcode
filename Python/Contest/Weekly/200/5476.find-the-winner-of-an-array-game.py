import collections
from typing import List


class Solution:
    def getWinner(self, arr: List[int], k: int) -> int:
        # print(arr, len(arr), k)
        if k >= len(arr):
            return max(arr)
        win_count = collections.defaultdict(int)
        while win_count[arr[0]] != k and win_count[arr[0]] != (len(arr) - 1):
            if arr[0] > arr[1]:
                arr.append(arr[1])
                del arr[1]
            else:
                arr.append(arr[0])
                del arr[0]
            win_count[arr[0]] += 1
            # print(win_count[arr[0]], arr)
        return arr[0]


s = Solution()
print(s.getWinner(arr = [2,1,3,5,4,6,7], k = 2))  # 5
print(s.getWinner([1,11,22,33,44,55,66,77,88,99], 1000000000))
print(s.getWinner([8686,4663,9810,4006,8718,1091,1264,2538,2067,7793,8238,2479,2388,9771,3071,6305,6992,9394,7443,5852,5004,4620,4317,7986,4040,2085,5575,2786,7424,9809,2212,6416,1053,2586,3881,2298,4479,3465,6517,2796,760,7588,821,6595,7943,6241,7780,3255,8144,1150,9216,7149,1983,543,2642,853,7400,2047,2979,9089,4561,4060,5034,3897,6076,7883,9531,8313,8359,6012,3088,4026,4848,5124,8812,6208,4747,5444,3794,8876,551,9977,8232,3073,8784,9246,9515,5515,9113,4387,1450,3094,4833,6596,4758,7778,4744,9545,79,9630,8437,729,3396,5765,3585,4084,796,8173,9639,6191,5245,6816,2268,8249,5394,8200,2814,3640,5570,115,2001,5888,845,8401,4526,5783,2019,6908,1679,7670,4967,7301,1562,7847,8597,4002,8741,3837,3031,2187,7937,2020,6028,7219,2515,839,9692,3550,2484,3020,7594,2915,6745,4679,1465,9345,6532,235,1719,5128,9021,7490,4343,8476,4800,8782,6762,2535,3580,4295,6969,3776,5477,1105,7949,7196,746,1878,8979,6867,3796,3039,61,4576,1766,1949,4255,4910,7245,2868,1936,8125,8186,6039,724,1789,9147,5836,4149,7401,8515,1801,6064,1830,6841,3851,1832,1100,4328,191,9306,7692,393,6922,7434,2101,8293,4202,6732,3275,3443,7044,8163,4743,9994,9367,4697,1225,5437,7086,3800,7161,5195,507,9305,359,3874,8395,5854,3161,3576,9163,5010,4433,4550,2682,5655,6856,3007,1690,8112,8058,2911,2462,4704,264,4799,6424,1649,4284,6813,8004,9363,6026,1243,8229,226,6647,2846,7629,700,7711,3678,7199,5527,9088,3752,8962,11,5037,3779,4162,1004,638,649,5752,2265,1879,8409,832,78,2160,8307,8207,1154,9507,9905,1116,1782,7302,1331,7607,2955,2918,7755,2219,6963,9332,3146,3844,1130,7047,2783,84,4966,1845,5404,5802,5529,9974,4640,690,3467,6291,2066,1008,9199,4694,8864,1840,8328,2724,4273,4139,2914,1118,6192,937,2504,473,4338,5142,329,8336,7467,8322,4047,7662,8594,8312,4389,6648,5989,4930,5979,1063,9553,9195,9364,4188,8091,8788,6593,6761,6505,8243,6119,3712,7672,4690,838,3297,8031,2155,6944,1732,259,8974,8662,4452,3170,4851,1650,2385,5297,1026,3340,7260,6870,2827,9648,3915,9496,1463,2784,8555,397,1362,5766,9827,3945,8613,5579,3471,2597,5907,4056,9818,5116,6874,1716,3671,198,9732,877,2697,527,3263,9561,2456,7732,1564,9807,2643,9087,3762,3269,2167,6673,8779,8831,5328,7041,6615,1851,2143,3134,4014,5928,6154,3221,5130,7821,3018,5830,4482,5049,2049,6153,862,5700,9396,4563,4385,8766,4763,3186,1526,2416,3842,4594,8633,1275,2970,1993,2883,9493,3777,4782,2780,384,9527,3055,3225,911,6356,2675,1579,4751,182,2947,3998,568,523,1055,521,5649,2421,2363,7584,3657,6752,6825,2334,9059,9079,9317,2070,6156,1946,1518,8205,7279,4454,294,636,1131,3229,7807,7524,3700,1697,4807,5673,5775,8995,6588,1800,3997,1660,5146,1728,2885,735,2218,7374,9167,9858,4687,6385,7765,742,9720,5405,621,9521,1180,1616,2450,8950,639,7125,2381,7678,3767,6093,508,4093,8598,4812,8426,7238,9530,8405,3017,3930,9137,6606,4303,390,2594,4292,4585,3523,3869,6787,8621,5723,2587,4956,3880,3459,4199,6414,3841,8540,5653,4584,9704,2009,8281,9474,4154,9888,3931,2060,8351,3124,3367,4780,5232,2861,9293,2035,3195,4621,3757,3947,3279,7928,685,7274,4249,3817,2856,8781,6127,6114,3567,6475,511,984,3216,1400,4924,1641,806,4768,1997,3265,1681], 146))
# 9994